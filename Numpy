####===============================================
#Numpy adarray 多维数组对象
##########=========================================
import numpy as np
#//
#生成随机数组
data = np.random.randn(2,3)
data

data * 2
data * data 

#每一个数组都有一个shape类型，用来表征数组每一维度的数量
data.shape

#每一个数组都有一个dtype属性，用来描述数组的数据类型
data.dtype

#生成 ndarray
data1 = [6,3,25.6,3,2.]
arr1 = np.array(data1)

data2 = [[1,2,3,4],[2,3,4,4]]
arr2 = np.array(data2) #自动转化为2*4的数组
arr2.ndim
arr2.shape

#返回各类数组
np.zeros(10) #长度为10的0数组

np.zeros((3,6)) #3*6的0数组

np.empty((2,3,4))#2*3*4的0数组

np.arange(15) #0-14的一维数组
#//

#数据类型
arr1 = np.array([1,2,3],dtype = np.float64)
arr2 = np.array([1,2,3],dtype = np.int32)

#可以z转化数据类型
arr = np.array([1,2,2])

flaoat_arr = arr.astype(np.float64)

caliber = np.array([1,2,3])

int_caliber = np.astype(arr.dtype)

empty_int = np.empty(8,'u8')#empty生成空数组，不安全没有时候会返回未初始化的拉计数值

#np 数据类型
#int8, uint8
#int16,uint16
#int32,uint32
#int64,uint64
#float16
#float32
#float64
#float128
#comlex64
#--128
#--256
#bool
#object
#string_
#unicode_
#
#//

#numpy 算术

arr = np.array([[1,2,3.],[4,5,6.]])
arr
arr*arr
arr-arr
1/arr
arr**0.5

arr2 = np.array([[0,4.,1.],[7.,2.,12.]])
arr2
arr2 > arr

#//
#基础索引与切片
arr = np.arange(10)
arr

arr[5]
arr[5:8]
arr[5:8] = 12

#区别于python的内建列表，数组的切片是原数组的视图，这意味着不是被复制了，任何对于视图的修改都会放映到原数组上。
arr_slice = arr[5:8]
arr_slice
arr_slice[1] = 12345
arr

arr_slice[:] = 64
arr
#如果你还是想要一份数组切片的拷贝而不是一份视图的话，你就必须显示的复制这个数组，例如arr[5:8].copy()

arr2d = np.array([[1,2,3],[4,5,6],[7,8,9]])
arr2d[2]
arr2d[0][2] == arr2d[0,2]

arr3d = =np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,12,12]]])
arr3d
arr3d[0]#2*3的数组

old_value = arr3d[0].copy()
arr3d[0] = 42
arr3d

arr3d[0] = old_value
arr3d
arr3d[1,0]

arr
arr[1:6]

arr2d
arr2d[:2]
arr2d[:2,1:]
arr2d[1,:2]
arr2d[:2,2]
arr2d[:,:1]
arr2d[:2,1:] = 0

#//

#布尔索引
names = np.array(['Bob','Joe','Will','Bob','Will','Joe','Joe'])
data = np.random.randn(7,4)

names
data

names == 'Bob'
data[names == 'Bob']
data[names == 'Bob',2:]

names != 'Bob'
data[~(names == 'Bob')] #'~' 符号取反

mask = (names == 'Bob') | (names == 'Will')# '|','&' or和and
data[mask]

data[data < 0] =0
data
data[names != 'Joe'] = 7
data

#//

#神奇索引
arr = np.empty((8,4))
for i in range(8):
	arr[i] = i
arr 
arr[[4,3,0,6]]	#为了选出一个符合特定顺序的子集，你可以简单地通过传递一个包含指明所需顺序的列表或者数组来完成。
arr[[-3,-5,-7]]

arr = np.arange(32).reshape(8,4)
arr
arr[[1,5,7,2],[0,3,1,2]]
arr[[1,5,7,2]][:,[0,3,1,2]]
#神奇索引与切片不同，他总是将数据复制到一个新的数组中

#//
#数组转置和换轴
arr = np.arange(15).reshape(3,5)
arr
arr.T #转置

arr = np.random.randn(6,3)
arr
np.dot(arr.T,arr) #矩阵的内积

arr = np.arange(16).reshape(2,2,4)
arr
arr.transpose((1,0,2))#接受包含轴编号的元组，用于置换轴

arr
arr.swapaxed(1,2) #返回的是数据的视图，没有对数据进行复制
#接收一对轴编号作为参数，对轴进行调整用于重组数据

#//
#通用函数：快速的逐元素数组函数
#
#简单的逐元素转换
arr = np.arange(10)
arr
np.sqrt(arr)
np.exp(arr)
#二元通用函数，接受两个数组，返回一个数组
x = np.random.randn(8)
y = np.random.randn(8)
x
y
np.maximum(x,y)
#返回多个数组的通用函数
arr = np.random.randn(7)*5
arr

remainder, whole_part = np.modf(arr) #返回一个数组的小数和整数部分
remainder
whole_part

#通用函数接受一个可选参数out，允许对数组按位置操作
arr
np.sqrt(arr)
arr
np.sqrt(arr,arr)
arr
#一元通用函数通用函数
#abs、fabs 逐元素的计算整数、浮点数或者复数的绝对值
###sqrt
#squre 
#log、log10、log2、log1p 计算log（1+x+
#exp
#sign 计算每个数的符号值（0,1，-1）
#ceil计算给定元素的最高整数值的最高整数值（向上取整）
#floor（向下取整）
#rint 元素保留到整数位 ，保持dtype
#modf
#isnan
#。。。。。。。

#//
#使用数组进行面向数组编程
points = np.arange(-5,5,0.01) #1000values

xs, ys = np.meshgrid(points, points) #接收两个一维数组，并根据两个数组所有（x，y）生成一个二维数组
ys

z = np.sqrt(xs**2+ys**2)

#使用matpltlib来生成这个二维数组的可视化
import matplotlib.pyplot as plt
plt.imshow(z, cmap = plt.cm.gray);plt.colorbar()
plt.title("Image plot of $\sqrt{x^2 +y^2 }$ for a grid of values")

#//
#将条件逻辑作为数组操作
xarr = np.array([1.1,1.2,1.3,1.4,1.5])
yarr = np.array([2.3,2.2,2.3,2.4,2.5])
cond = np.array([True,False,True,True,False])

result = [(x if x else y ) 
					for x, y, c in zip(xarr,yarr,cond)]
result # 这样会产生很多问题，如果数组很大，速度会很慢

result = np.where(cond, xarr,yarr)#x if condition else y 的向量版本
result 

arr = np.random.randn(4,4)
arr
arr>0
np.where(arr>0,2,-2)#将arr里大于0的值换成2，非正值换为-2
np.where(arr>0,2,arr) #仅仅将正值换为2，其余值不变

#//
#数学和统计学方法
arr.np.random.randn(5,4)
arr.mean()
np.mean(arr)
arr.sum()

arr.mean(axis = 1) #按列求均值
arr.sum(axis=0) #按行求和

arr = np.array([0,1,2,3,4,5,6,7])
arr.cumsum()#从0开始求累计和
arr.cumprod() #从1开始求累计积

arr.std()
arr.var()

arr.argmin()
arr.argmax()#最小值和最大值的位置

#//

#布尔值数组的方法
arr= np.random.randn(100)
(arr > 0).sum() 	#计算正值的个数

bools = np.array([False, False, True, False])
bools.any()		#检查布尔值数组是否至少含有一个True
bools.all()		#检查布尔值数组是否每个值都是True
#这些方法也可适用于非布尔值数组，所有非0元素都按照True来处理

#//

#排序
arr = np.random.randn(6)
arr

arr.sort()
arr		#数组元素的顺序已经改变

arr = np.random.randn(5,3)
arr

arr.sort(1)	#对数组按照第0行的大小，重新对列排序
arr

large_arr = np.random.randn(1000)
large_arr.sort()
large_arr[int(0.05 *len(large_arr))]  #5% quantile
#//

#唯一值与其他集合逻辑
names = np.array(['Bob','Joe','Will','Bob','Will','Joe','Joe'])
np.unique(names)		#返回数组中唯一值排序后形成的数组

ints = np.array([3,3,3,2,2,1,1,4,4])
np.unique(ints)		

#np.unique 和纯python对比
sorted(set(names))
##
values = np.array([6,0,0,3,2,5,6])
np.in1d(values,[2,3,6])		#检查一个数组中的值，是否在另外一个数组中，并返回一个布尔值数组

##numpy中集合函数：
##unique（x） 计算x的唯一值，并排序
##intersect1d(x,y) 计算x，y的交集，并排序
##union1d(x,y)  计算x，y的并集，并排序
##in1d(x,y)  计算x中的元素是否包含在y中，并返回一个布尔值数组
##setdiff1d（x，y） 差集，在x中但不在y中的x的元素
##setxor1d（x，y）	 异或集，在x或y中，但不属于x和y的交集的元素
#//

#使用数组进行文件输入和输出
arr = np.arange(10)
np.save('some_arry',arr)	#如果文件存放路径中没写 .npy 时，后缀名会被自动加上。
np.laod('somg_array')		#硬盘上的数组可以直接使用np.laod进行载入
np.savez('array_archive.npz',a = arr, b = arr)		#可以使用np.savez 并将数组作为参数传递给该函数，用于在未压缩文件中保存多个数组
arch = np.laod('array_archive.npz')	#当载入一个npz文件的时候，你会获得一个字典型的对象，并通过该对象很方便的载入单个数组
arch['b']

np.savez_compressed('array_compressed.npz',a = arr,b=arr) #如果你想讲数据存入已经压缩的文件

#//

#线性代数
x = np.array([[1,2,3.],[4,5,6.]])	#2*3
y = np.array([[6.,23.],[-1,7],[8,9]])	#3*2
x
y

##点乘积（矩阵乘积）XY
x.dot(y)
np.dot(x,y)
x @ y

np.dot(x,np.ones(3)) #一个二维数组与一个长度合适的一维数组矩阵乘积，结果是一个一维数组

from numpy.linalg import inv, qr
X = np.random.randn(5,5)
mat = X.T.dot(X)	#求X矩阵的转置与X矩阵的点乘积
inv(mat)	#求逆
mat.dot(inv(mat))	#结果为单位阵
q, r = qr(mat)	#计算Q,R 分解
###常用numpy.linalg函数
#diag	 将一个方阵的对角（或非对角）元素作为一维数组返回，或者将一维数组转换成一个方阵，并且在非对角线上有0点
#dot 	 矩阵点乘
#trace	 计算对角线元素和
#det 	 计算矩阵的行列式
#eig	 计算方阵的特征值和特征向量
#inv	 计算方阵的逆矩阵
#pinv	 计算矩阵的moore-penrose 伪逆
#qr 	 计算QR分解
#svd	 计算奇异值分解
#solve	 求解x的线性系统Ax = b，其中A是方阵
#lstsq	 计算Ax = b，的最小二乘解
#//

#伪随机数生成
samples = np.random.normal(size = (4,4))
samples		#numpy.random 模块弥补了python内建random模块的不足，可以高效生成多种概率分布下的完整样本值数组

from random import normalvariate 
N = 100000		#python内建random模块，一次只能生成一个值

%timeit samples = [normalvariate(0,1) for _ in range(N)]
%timeit np.random.normal(size = N)

np.random.seed(1234)	#这些伪随机数书友随机数种子生成的，可以通过np.random.seed 来改变种子

rng = np.random.randomState(1234)	 #np.random里的数据生成函数使用一个全局种子，为了避免全局状态，你可以使用该函数该函数创建一个独立于其他随机数据的数据生成器
rng.randn(10)

##np.random中的函数
##seed
##permutation	 返回一个序列的随机排列，或者返回一个乱序的整数范围序列
##shuffle	 随机排列一个序列
##rand	 	 从均匀分布中出去样本
##randint	 根据给定的由低到高的范围抽取随机整数
##randn	 	 从均值0，方差1的正态分布中抽取样本
##binomial	 从二项分布抽取样本
##normal
##beta
##chisquare
##gamma
##uniform	 从均匀[0,1)分布中抽取样本

#//

#随机漫步
{
#考虑一个简单的随机漫步，从0开始，步进为1或者-1，且两者概率相同
#python内建函数实现
import random
position = 0
walk = [position]
step = 1000
for i in range(step):
    step = 1 if random.randint(0,1) else -1
    position += step
    walk.append(position)
plt.plot(walk[:100])
}
{
#用numpy计算
nsteps = 1000
draws = np.random.randint(0,2,size = nsteps)
steps = np.where(draws > 0,1,-1)
walk = steps.cumsum()

walk.min()	#统计一些漫步轨道上的最大值，最小值
walk.max()

#找出何时第一次连续往一个方向走了十步
(np.abs(walk) >= 10).argmax()	#argmax效率不高，因为它总是完整的扫描整个数组，在这个例子里，一旦发现TRUE就可以停下了
}

{
#一次性模拟多次随机漫步
nwalks = 1000
nsteps = 2000
draws = np.random.randint(0,2,size= (nwalks,nsteps)) #0或1
steps = np.where(draws >0,1,-1)
walks = steps.cumsum(1)		#1表示按行做累加（0表示按列）
walks
walks.max()
walks.min()

hist30 = (np.abs(walks) >= 30).any(1)	#表示判断每行是否 均存在随机漫步超过30步的
hist30
hist30.sum()

crossing_times = (np.abs(walks[hist30]) >= 30).argmax(1)	 #使用布尔值数组，选出步数超过30步所在的行，并使用argmax从轴1上，获取其第一次穿越的时间
crossing_times.mean()
}



##本笔记为学习《利用python进行数据分析》-Wes McKinney 所做，仅提供参考


