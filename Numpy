####===============================================
#Numpy adarray 多维数组对象
##########=========================================
import numpy as np
#//
#生成随机数组
data = np.random.randn(2,3)
data

data * 2
data * data 

#每一个数组都有一个shape类型，用来表征数组每一维度的数量
data.shape

#每一个数组都有一个dtype属性，用来描述数组的数据类型
data.dtype

#生成 ndarray
data1 = [6,3,25.6,3,2.]
arr1 = np.array(data1)

data2 = [[1,2,3,4],[2,3,4,4]]
arr2 = np.array(data2) #自动转化为2*4的数组
arr2.ndim
arr2.shape

#返回各类数组
np.zeros(10) #长度为10的0数组

np.zeros((3,6)) #3*6的0数组

np.empty((2,3,4))#2*3*4的0数组

np.arange(15) #0-14的一维数组
#//

#数据类型
arr1 = np.array([1,2,3],dtype = np.float64)
arr2 = np.array([1,2,3],dtype = np.int32)

#可以z转化数据类型
arr = np.array([1,2,2])

flaoat_arr = arr.astype(np.float64)

caliber = np.array([1,2,3])

int_caliber = np.astype(arr.dtype)

empty_int = np.empty(8,'u8')#empty生成空数组，不安全没有时候会返回未初始化的拉计数值

#np 数据类型
#int8, uint8
#int16,uint16
#int32,uint32
#int64,uint64
#float16
#float32
#float64
#float128
#comlex64
#--128
#--256
#bool
#object
#string_
#unicode_
#
#//

#numpy 算术

arr = np.array([[1,2,3.],[4,5,6.]])
arr
arr*arr
arr-arr
1/arr
arr**0.5

arr2 = np.array([[0,4.,1.],[7.,2.,12.]])
arr2
arr2 > arr

#//
#基础索引与切片
arr = np.arange(10)
arr

arr[5]
arr[5:8]
arr[5:8] = 12

#区别于python的内建列表，数组的切片是原数组的视图，这意味着不是被复制了，任何对于视图的修改都会放映到原数组上。
arr_slice = arr[5:8]
arr_slice
arr_slice[1] = 12345
arr

arr_slice[:] = 64
arr
#如果你还是想要一份数组切片的拷贝而不是一份视图的话，你就必须显示的复制这个数组，例如arr[5:8].copy()

arr2d = np.array([[1,2,3],[4,5,6],[7,8,9]])
arr2d[2]
arr2d[0][2] == arr2d[0,2]

arr3d = =np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,12,12]]])
arr3d
arr3d[0]#2*3的数组

old_value = arr3d[0].copy()
arr3d[0] = 42
arr3d

arr3d[0] = old_value
arr3d
arr3d[1,0]

arr
arr[1:6]

arr2d
arr2d[:2]
arr2d[:2,1:]
arr2d[1,:2]
arr2d[:2,2]
arr2d[:,:1]
arr2d[:2,1:] = 0

#//

#布尔索引
names = np.array(['Bob','Joe','Will','Bob','Will','Joe','Joe'])
data = np.random.randn(7,4)

names
data

names == 'Bob'
data[names == 'Bob']
data[names == 'Bob',2:]

names != 'Bob'
data[~(names == 'Bob')] #'~' 符号取反

mask = (names == 'Bob') | (names == 'Will')# '|','&' or和and
data[mask]

data[data < 0] =0
data
data[names != 'Joe'] = 7
data

#//

#神奇索引
arr = np.empty((8,4))
for i in range(8):
	arr[i] = i
arr 
arr[[4,3,0,6]]	#为了选出一个符合特定顺序的子集，你可以简单地通过传递一个包含指明所需顺序的列表或者数组来完成。
arr[[-3,-5,-7]]

arr = np.arange(32).reshape(8,4)
arr
arr[[1,5,7,2],[0,3,1,2]]
arr[[1,5,7,2]][:,[0,3,1,2]]
#神奇索引与切片不同，他总是将数据复制到一个新的数组中

#//
#数组转置和换轴
arr = np.arange(15).reshape(3,5)
arr
arr.T #转置

arr = np.random.randn(6,3)
arr
np.dot(arr.T,arr) #矩阵的内积

arr = np.arange(16).reshape(2,2,4)
arr
arr.transpose((1,0,2))#接受包含轴编号的元组，用于置换轴

arr
arr.swapaxed(1,2) #返回的是数据的视图，没有对数据进行复制
#接收一对轴编号作为参数，对轴进行调整用于重组数据

#//
#通用函数：快速的逐元素数组函数
#
#简单的逐元素转换
arr = np.arange(10)
arr
np.sqrt(arr)
np.exp(arr)
#二元通用函数，接受两个数组，返回一个数组
x = np.random.randn(8)
y = np.random.randn(8)
x
y
np.maximum(x,y)
#返回多个数组的通用函数
arr = np.random.randn(7)*5
arr

remainder, whole_part = np.modf(arr) #返回一个数组的小数和整数部分
remainder
whole_part

#通用函数接受一个可选参数out，允许对数组按位置操作
arr
np.sqrt(arr)
arr
np.sqrt(arr,arr)
arr
#一元通用函数通用函数
#abs、fabs 逐元素的计算整数、浮点数或者复数的绝对值
###sqrt
#squre 
#log、log10、log2、log1p 计算log（1+x+
#exp
#sign 计算每个数的符号值（0,1，-1）
#ceil计算给定元素的最高整数值的最高整数值（向上取整）
#floor（向下取整）
#rint 元素保留到整数位 ，保持dtype
#modf
#isnan
#。。。。。。。

#//
#使用数组进行面向数组编程
points = np.arange(-5,5,0.01) #1000values

xs, ys = np.meshgrid(points, points) #接收两个一维数组，并根据两个数组所有（x，y）生成一个二维数组
ys

z = np.sqrt(xs**2+ys**2)

#使用matpltlib来生成这个二维数组的可视化
import matplotlib.pyplot as plt
plt.imshow(z, cmap = plt.cm.gray);plt.colorbar()
plt.title("Image plot of $\sqrt{x^2 +y^2 }$ for a grid of values")

#//
#将条件逻辑作为数组操作
xarr = np.array([1.1,1.2,1.3,1.4,1.5])
yarr = np.array([2.3,2.2,2.3,2.4,2.5])
cond = np.array([True,False,True,True,False])

result = [(x if x else y ) 
					for x, y, c in zip(xarr,yarr,cond)]
result # 这样会产生很多问题，如果数组很大，速度会很慢

result = np.where(cond, xarr,yarr)#x if condition else y 的向量版本
result 

arr = np.random.randn(4,4)
arr
arr>0
np.where(arr>0,2,-2)#将arr里大于0的值换成2，非正值换为-2
np.where(arr>0,2,arr) #仅仅将正值换为2，其余值不变

#//
#数学和统计学方法
arr.np.random.randn(5,4)
arr.mean()
np.mean(arr)
arr.sum()

arr.mean(axis = 1) #按列求均值
arr.sum(axis=0) #按行求和

arr = np.array([0,1,2,3,4,5,6,7])
arr.cumsum()#从0开始求累计和
arr.cumprod() #从1开始求累计积

arr.std()
arr.var()

arr.argmin()
arr.argmax()#最小值和最大值的位置














































